%global srcname cytoolz

%define py_setup_args --with-cython

Name:           python-%{srcname}
Version:        1.0.1
Release:        %autorelease
Summary:        Cython implementation of the toolz package

# Automatically converted from old format: BSD - review is highly recommended.
License:        BSD-3-Clause
URL:            http://github.com/pytoolz/%{srcname}/
Source0:        https://files.pythonhosted.org/packages/source/c/cytoolz/cytoolz-%{version}.tar.gz
Patch:          python-cytoolz-0001-Test-against-Python-3.14-dev-on-CI-592.patch



BuildRequires:  gcc

%description
Cython implementation of the toolz package, which provides high performance
utility functions for iterables, functions, and dictionaries.

toolz is a pure Python package that borrows heavily from contemporary
functional languanges. It is designed to interoperate seamlessly with other
libraries including itertools, functools, and third party libraries. High
performance functional data analysis is possible with builtin types like list
and dict, and user-defined data structures; and low memory usage is achieved
by using the iterator protocol and returning iterators whenever possible.

cytoolz implements the same API as toolz. The main differences are that
cytoolz is faster (typically 2-5x faster with a few spectacular exceptions)
and cytoolz offers a C API that is accessible to other projects developed in
Cython. Since toolz is able to process very large (potentially infinite) data
sets, the performance increase gained by using cytoolz can be significant.

See the PyToolz documentation at http://toolz.readthedocs.org.


%package -n python%{python3_pkgversion}-%{srcname}
Summary:        Cython implementation of the toolz package
BuildRequires:  python%{python3_pkgversion}-devel
BuildRequires:  python%{python3_pkgversion}-pytest
BuildRequires:  python%{python3_pkgversion}-toolz >= 0.9.0

%description -n python%{python3_pkgversion}-%{srcname}
Cython implementation of the toolz package, which provides high performance
utility functions for iterables, functions, and dictionaries.

toolz is a pure Python package that borrows heavily from contemporary
functional languanges. It is designed to interoperate seamlessly with other
libraries including itertools, functools, and third party libraries. High
performance functional data analysis is possible with builtin types like list
and dict, and user-defined data structures; and low memory usage is achieved
by using the iterator protocol and returning iterators whenever possible.

cytoolz implements the same API as toolz. The main differences are that
cytoolz is faster (typically 2-5x faster with a few spectacular exceptions)
and cytoolz offers a C API that is accessible to other projects developed in
Cython. Since toolz is able to process very large (potentially infinite) data
sets, the performance increase gained by using cytoolz can be significant.

See the PyToolz documentation at http://toolz.readthedocs.org.


%prep
%autosetup -p1 -n %{srcname}-%{version}

# Remove the cythonized files in order to regenerate them during build.
rm $(grep -rl '/\* Generated by Cython')
# Do not ship tests
sed -i -e '\,/tests/,d' MANIFEST.in
sed -i -e "s|, 'tests/\*.py'||" setup.py


%generate_buildrequires
%pyproject_buildrequires


%build
%pyproject_wheel


%install
%pyproject_install
%pyproject_save_files -l %{srcname}
# Ensure tests are not shipped
rm -rf %{buildroot}%{python3_sitearch}/%{srcname}/tests


%check
%pytest -v cytoolz/tests


%files -n python%{python3_pkgversion}-%{srcname} -f %{pyproject_files}


%changelog
%autochangelog
