%bcond tests 1
# Build dependencies gunicorn and uvloop are required only for integration
# tests, which can be omitted if they are not available.
%bcond gunicorn 1
# The python-uvloop package was retired for Fedora 43.
%bcond uvloop 0

Name:           python-aiohttp
Version:        3.13.1
Release:        %autorelease
Summary:        Python HTTP client/server for asyncio

License:        Apache-2.0
URL:            https://github.com/aio-libs/aiohttp
# We use requirements/*.txt to generate test dependencies; these files are not
# present in the PyPI sdist, so we must use the GitHub archive.
Source:         %{url}/archive/v%{version}/aiohttp-%{version}.tar.gz

BuildRequires:  gcc

# CVE-2024-27982 requires >= 9.2.1. The actual lower bound is based on the
# version that upstream bundles/vendors.
BuildRequires:  llhttp-devel >= 9.3.0

BuildRequires:  python3-devel

%global common_description %{expand:
Python HTTP client/server for asyncio which supports both the client and the
server side of the HTTP protocol, client and server websocket, and webservers
with middlewares and pluggable routing.}

%description %{common_description}


%package -n python3-aiohttp
Summary:        %{summary}

Recommends:     python3-aiohttp+speedups

%description -n python3-aiohttp %{common_description}

%pyproject_extras_subpkg -n python3-aiohttp speedups


%prep
%autosetup -n aiohttp-%{version} -p1

# Remove bundled llhttp
rm -rv vendor/llhttp

# Disable test coverage reports
# https://docs.fedoraproject.org/en-US/packaging-guidelines/Python/#_linters
sed -r -i '/--cov=|-p pytest_cov/d' setup.cfg

%if %{without gunicorn}
sed -r -i 's/^gunicorn/# &/' requirements/base.in
%endif

%if %{without uvloop}
sed -r -i 's/^uvloop/# &/' requirements/base.in
%endif

# Comment out:
#   - optional test dependencies that are not yet packaged or are useless here;
#     for blockbuster, see https://github.com/cbornet/blockbuster/issues/46 for
#     why we would prefer not to package it
#   - isal, on 32-bit architectures only (see Patch1000, which keeps the tests
#     from trying to use it on these architectures)
#   - coverage and benchmarking dependenecies
#   - the “-c” constraint, which the pyproject-rpm-macros don’t support
sed -r -i \
   -e 's/^(blockbuster|proxy[-\.]py|python-on-whales|wait-for-it)/# &/' \
%if 0%{?__isa_bits} == 32
   -e 's/^(isal)/# &/' \
%endif
   -e 's/^(coverage|pytest-cov|pytest_codspeed|mypy)/# &/' \
   -e 's/^(setuptools-git)/# &/' \
   requirements/test-common.in

# Make sure the source archive does not include any files generated by Cython
grep -rl '/\* Generated by Cython' | xargs -r rm -v

# don't treat DeprecationWarnings as errors in subprocess based tests
sed -i 's/"-W", "error"/"-W", "error", "-W", "ignore::DeprecationWarning"/' \
    tests/test_circular_imports.py


%generate_buildrequires
export AIOHTTP_USE_SYSTEM_DEPS=1
%{pyproject_buildrequires \
    requirements/cython.in \
    %{?with_tests:requirements/test.in}}


%build
export AIOHTTP_USE_SYSTEM_DEPS=1
# Recreate removed Cython files using commands extracted from the Makefile.
# We don't run make directly, as it pip-installs Cython.
#
# See the aiohttp/_find_header.c target in the Makefile; this also generates
# _headers.pyi.
%{python3} tools/gen.py
# Now we can invoke Cython. Again, see the Makefile.
%{python3} -m cython -3 \
    aiohttp/*.pyx \
    aiohttp/_websocket/*.pyx \
    aiohttp/_websocket/reader_c.py \
    -I aiohttp
# Now we can actually proceed with building the package.
%pyproject_wheel


%install
%pyproject_install
%pyproject_save_files -l aiohttp


%check
%if %{without tests}
# - aiohttp.worker requires gunicorn (a test dependency)
# - aiohttp.pytest_plugin requires pytest (a test dependency)
%{pyproject_check_import -e aiohttp.worker -e aiohttp.pytest_plugin}
%else
%{pyproject_check_import %{?!with_gunicorn:-e aiohttp.worker}}

# Fixes problems importing compiled extensions from subprocesses.
export PYTHONSAFEPATH=1

# We do not want to run benchmarks (and we patched out their dependencies)
ignore="${ignore-} --ignore-glob=tests/test_benchmarks_*"

# test_proxy_functional.py requires python3dist(proxy-py)
ignore="${ignore-} --ignore=tests/test_proxy_functional.py"

# These require python-on-whales and a running Docker
ignore="${ignore-} --ignore=tests/autobahn"

# These require network access (at least DNS):
k="${k-}${k+ and }not test_client_session_timeout_zero"
k="${k-}${k+ and }not test_invalid_idna"
k="${k-}${k+ and }not test_tcp_connector_ssl_shutdown_timeout_passed_to_create_connection[pyloop]"
k="${k-}${k+ and }not test_tcp_connector_ssl_shutdown_timeout_zero_not_passed[pyloop]"
k="${k-}${k+ and }not test_tcp_connector_ssl_shutdown_timeout_nonzero_passed[pyloop]"

# A slow builder may easily violate an arbitrary bound on how long it should
# take to import the package. This is not something we need to care about
# downstream.
k="${k-}${k+ and }not test_import_time"

%if %{without gunicorn}
k="${k-}${k+ and }not test_no_warnings[aiohttp.worker]"
%endif

%pytest -Wdefault ${ignore-} -k "${k-}" -m 'not dev_mode'
%endif


%files -n python3-aiohttp -f %{pyproject_files}
%doc CHANGES.rst
%doc README.rst


%changelog
%autochangelog
